<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied"
		class="com.mgrg.hrm.login.security.CustomAccessDeniedHandler" />

	<bean id="customLoginSuccess"
		class="com.mgrg.hrm.login.security.CustomLoginSuccessHandler" />

	<!-- 커스텀 -->
	<bean id="customPasswordEncoder" class="com.mgrg.hrm.login.security.CustomNoOpPasswordEncoder"/>
	
	
	<!-- 스프링에서 제공하는 bcryptPasswordEncoder -->
	<!-- <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />  -->
	

	<!-- 컨테이너의 HTTP security 요소 -->
	<security:http>

		<!-- 특정 url pattern 요청이 들어올때 인터셉터를 이용해 접근 제한 설정 -->
		<security:intercept-url pattern="/sample/all"
			access="permitAll" />
		<security:intercept-url
			pattern="/login/mainLoginPage" access="permitAll" />

		<!-- /sample/member URI 요청은 ROLE_MEMBER 라는 권한이 있는 사용자만이 접근 가능 -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
			
		<security:intercept-url pattern="/sample/admin"  access="hasRole('ROLE_ADMIN')" />
		
		<security:intercept-url pattern="/login/adminMainPage" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/notice/**" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/officehour/**" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/staff/**" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/login/member" access="hasRole('ROLE_MEMBER')" />
		
		<security:form-login
			login-page="/login/mainLoginPage"
			authentication-success-handler-ref="customLoginSuccess" />

		<security:access-denied-handler
			ref="customAccessDenied" />

		<security:logout logout-url="/customLogout"
			invalidate-session="true"  
				 logout-success-url="/login/mainLoginPage"/>

	</security:http>

	<!-- AuthenticationManager 빈 생성 -->
	<security:authentication-manager>
<!-- 		<security:authentication-provider>   provider는 당연히 여러개 만들 수 있다. -->
			

<!-- 		<security:jdbc-user-service -->
<!-- 				data-source-ref="dataSource"  -->
<!-- 				users-by-username-query= -->
<!-- 				"select userid username, userpw password, enabled from tbl_member where userid = ?" -->
<!-- 				 authorities-by-username-query= -->
<!-- 				 "select userid username, auth authority from tbl_member_auth where userid = ?"/> -->

<!-- 				<security:password-encoder ref="customPasswordEncoder" />  -->




<!-- 		위에서 생성한 bcryptPasswordEncoder bean 주입 -->
<!-- 			 <security:password-encoder ref="bcryptPasswordEncoder"/> -->

 				
<!-- 		</security:authentication-provider> -->
		
		<security:authentication-provider>   <!-- provider는 당연히 여러개 만들 수 있다. -->
			

		<security:jdbc-user-service
				data-source-ref="dataSource" 
				users-by-username-query=
				"select EMP_ID username, EMP_PW password, enabled from employees where EMP_ID = ?"
				 authorities-by-username-query=
				 "select e.EMP_ID username, p.p_auth authority from employees e, positionrank p where EMP_ID = ? and e.p_uid = p.p_uid"/>

				<security:password-encoder ref="customPasswordEncoder" /> 



		<!-- 위에서 생성한 bcryptPasswordEncoder bean 주입 -->
			<!-- <security:password-encoder ref="bcryptPasswordEncoder"/> -->
 				
		</security:authentication-provider>
	</security:authentication-manager>





</beans>
